// Generated by CoffeeScript 1.12.7
(function() {
  var expect, fs, jsdom, path, planer;

  expect = require('chai').expect;

  fs = require('fs');

  jsdom = require('jsdom');

  path = require('path');

  planer = require('../src/planer');

  describe('planer#extractFromHtml', function() {
    before('configure jsdom', function() {
      jsdom.defaultDocumentFeatures = {
        FetchExternalResources: false,
        ProcessExternalResources: false
      };
      return this.dom = new jsdom.JSDOM().window.document;
    });
    it('should return an empty body when given an empty body', function() {
      var msgBody;
      msgBody = '';
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal('');
    });
    it('should return a the text of a message with splitter inside blockqouote', function() {
      var msgBody;
      msgBody = "Reply\n<blockquote>\n\n  <div>\n    On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n  </div>\n\n  <div>\n    Test\n  </div>\n\n</blockquote>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal('<html><body>Reply\n</body></html>');
    });
    it('should return a the text of a message with splitter outside blockqouote', function() {
      var msgBody;
      msgBody = "Reply\n\n<div>\n  On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n</div>\n\n<blockquote>\n  <div>\n    Test\n  </div>\n</blockquote>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal('<html><body>Reply\n\n</body></html>');
    });
    it('should not be fooled by a regular blockquote', function() {
      var msgBody;
      msgBody = "Reply\n<blockquote>Regular</blockquote>\n\n<div>\n  On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n</div>\n\n<blockquote>\n  <div>\n    <blockquote>Nested</blockquote>\n  </div>\n</blockquote>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal("<html><body>Reply\n<blockquote>  Regular  </blockquote>\n\n</body></html>");
    });
    it('should not be fooled by a regular blockquote', function() {
      var msgBody, reply;
      msgBody = "<html>\n<body>\nReply\n\n<div>\n  On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n</div>\n\n<div>\n  Test\n</div>\n</body>\n</html>";
      reply = "<html><body>\nReply\n\n</body></html>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal(reply);
    });
    it('handles invalid html', function() {
      var msgBody;
      msgBody = "Reply\n<div>\n  On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n\n    <blockquote>\n      <div>\n        Test\n      </div>\n    </blockquote>\n</div>\n\n<div/>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal('<html><body>Reply\n<div>    </div></body></html>');
    });
    it('handles gmail quotes', function() {
      var msgBody;
      msgBody = "Reply\n<div class=\"gmail_quote\">\n  <div class=\"gmail_quote\">\n    On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n    <div>\n      Test\n    </div>\n  </div>\n</div>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal('<html><body>Reply\n</body></html>');
    });
    it('does not miss a disclaimer after a blockquote', function() {
      var msgBody, reply;
      msgBody = "<html>\n  <body>\n  <div>\n    <div>\n      message\n    </div>\n    <blockquote>\n      Quote\n    </blockquote>\n  </div>\n  <div>\n    disclaimer\n  </div>\n  </body>\n</html>";
      reply = "<html><body>\n  <div>\n    <div>\n      message\n    </div>\n    \n  </div>\n  <div>\n    disclaimer\n  </div>\n  \n</body></html>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal(reply);
    });
    it('removes the tag with a quotation block that starts with "Date:"', function() {
      var msgBody, reply;
      msgBody = "<div>\n  message<br>\n  <div>\n    <hr>\n    Date: Fri, 23 Mar 2012 12:35:31 -0600<br>\n    To: <a href=\"mailto:bob@example.com\">bob@example.com</a><br>\n    From: <a href=\"mailto:rob@example.com\">rob@example.com</a><br>\n    Subject: You Have New Mail From Mary!<br><br>\n\n    text\n  </div>\n</div>";
      reply = '<html><body><div>\n  message<br>\n  \n</div></body></html>';
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal(reply);
    });
    it('removes the tag with a quotation block that starts with "From:"', function() {
      var msgBody, reply;
      msgBody = "<div>\nmessage<br>\n<div>\n<hr>\nFrom: <a href=\"mailto:bob@example.com\">bob@example.com</a><br>\nDate: Fri, 23 Mar 2012 12:35:31 -0600<br>\nTo: <a href=\"mailto:rob@example.com\">rob@example.com</a><br>\nSubject: You Have New Mail From Mary!<br><br>\n\ntext\n</div></div>";
      reply = '<html><body><div>\nmessage<br>\n</div></body></html>';
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal(reply);
    });
    it('is not fooled if the reply shared a div with the quotation', function() {
      var msgBody, reply;
      msgBody = "<body>\n  <div>\n\n    Blah<br><br>\n\n    <hr>Date: Tue, 22 May 2012 18:29:16 -0600<br>\n    To: xx@hotmail.ca<br>\n    From: quickemail@ashleymadison.com<br>\n    Subject: You Have New Mail From x!<br><br>\n\n  </div>\n</body>";
      reply = "<html><body>\n  <div>\n\n    Blah<br><br>\n\n    </div>\n</body></html>";
      return expect(planer.extractFromHtml(msgBody, this.dom)).to.equal(reply);
    });
    return describe('examples from files', function() {
      var absolutePath;
      absolutePath = function(relativePath) {
        return path.join(__dirname, relativePath);
      };
      it('handles emails with numerous microsoft namespaces', function() {
        var extractedHtml, msgBody, originalMsgSnippet, replySnippet;
        replySnippet = 'Lorem ipsum dolor sit amet';
        originalMsgSnippet = 'Odio et pretium rutrum neque';
        msgBody = fs.readFileSync(absolutePath('examples/html/microsoft-namespaces.html'), 'utf8');
        expect(msgBody).to.contain(replySnippet);
        expect(msgBody).to.contain(originalMsgSnippet);
        extractedHtml = planer.extractFromHtml(msgBody, this.dom);
        expect(extractedHtml).to.exist;
        expect(extractedHtml).to.contain(replySnippet);
        return expect(extractedHtml).not.to.contain(originalMsgSnippet);
      });
      it('handles emails from Office 365', function() {
        var extractedHtml, msgBody, originalMsgSnippet, replySnippet;
        replySnippet = "I really hope that you're doing well!";
        originalMsgSnippet = 'Do you like the holidays?';
        msgBody = fs.readFileSync(absolutePath('examples/html/office-365.html'), 'utf8');
        expect(msgBody).to.contain(replySnippet);
        expect(msgBody).to.contain(originalMsgSnippet);
        extractedHtml = planer.extractFromHtml(msgBody, this.dom);
        expect(extractedHtml).to.exist;
        expect(extractedHtml).to.contain(replySnippet);
        return expect(extractedHtml).not.to.contain(originalMsgSnippet);
      });
      return it('handles emails from various Outlook versions', function() {
        var extractedHtml, msgBody, originalMsgSnippet, replySnippet;
        replySnippet = 'This is how it looks on my emails';
        originalMsgSnippet = "We'd love to set up a quick phone call with you";
        msgBody = fs.readFileSync(absolutePath('examples/html/outlook-mixed.html'), 'utf8');
        expect(msgBody).to.contain(replySnippet);
        expect(msgBody).to.contain(originalMsgSnippet);
        extractedHtml = planer.extractFromHtml(msgBody, this.dom);
        expect(extractedHtml).to.exist;
        expect(extractedHtml).to.contain(replySnippet);
        return expect(extractedHtml).not.to.contain(originalMsgSnippet);
      });
    });
  });

}).call(this);
