// Generated by CoffeeScript 1.12.7
(function() {
  var expect, planer;

  expect = require('chai').expect;

  planer = require('../src/planer');

  describe('planer#extractFromPlain', function() {
    it('should return a the test of a simple message', function() {
      var msgBody;
      msgBody = 'Oh, hai';
      return expect(planer.extractFromPlain(msgBody)).to.equal('Oh, hai');
    });
    it('understands the on-date-somebody-wrote splitter', function() {
      var msgBody;
      msgBody = "Test reply\n\nOn 11-Apr-2011, at 6:54 PM, Roman Tkachenko <romant@example.com> wrote:\n\n>\n> Test\n>\n> Roman";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Test reply');
    });
    it('allows humans to use on to start a line', function() {
      var msgBody;
      msgBody = "Blah-blah-blah\nOn blah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal(msgBody);
    });
    it('Notices when real test is on the splitter line', function() {
      var msgBody, reply;
      msgBody = "reply On Wed, Apr 4, 2012 at 3:59 PM, bob@example.com wrote:\n> Hi";
      expect(planer.extractFromPlain(msgBody)).to.equal('reply');
      msgBody = "reply--- On Wed, Apr 4, 2012 at 3:59 PM, me@domain.com wrote:\n> Hi";
      expect(planer.extractFromPlain(msgBody)).to.equal('reply');
      msgBody = "reply\nbla-bla - bla--- On Wed, Apr 4, 2012 at 3:59 PM, me@domain.com wrote:\n> Hi";
      reply = "reply\nbla-bla - bla";
      return expect(planer.extractFromPlain(msgBody)).to.equal(reply);
    });
    it('picks up replies after the quotation', function() {
      var msgBody;
      msgBody = "On 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n\n>\n> Test\nTest reply";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Test reply');
    });
    it('detects wrapping replies', function() {
      var msgBody, reply;
      msgBody = "Test reply\nOn 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n\n>\n> Test\nRegards, Roman";
      reply = "Test reply\n\nRegards, Roman";
      return expect(planer.extractFromPlain(msgBody)).to.equal(reply);
    });
    it('detects wrapping of nested replies', function() {
      var msgBody, reply;
      msgBody = "Test reply\nOn 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n\n>Test test\n>On 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n>\n>>\n>> Test.\n>>\n>> Roman\n\nRegards, Roman";
      reply = "Test reply\n\nRegards, Roman";
      return expect(planer.extractFromPlain(msgBody)).to.equal(reply);
    });
    it('is not fooled by 2 line splitters', function() {
      var msgBody, reply;
      msgBody = "Test reply\nOn Fri, May 6, 2011 at 6:03 PM, Roman Tkachenko from Hacker News\n<roman@definebox.com> wrote:\n\n> Test.\n>\n> Roman\n\nRegards, Roman";
      reply = "Test reply\n\nRegards, Roman";
      return expect(planer.extractFromPlain(msgBody)).to.equal(reply);
    });
    it('not fooled by 3 line splitters', function() {
      var msgBody;
      msgBody = "Test reply\nOn Nov 30, 2011, at 12:47 PM, Somebody <\n416ffd3258d4d2fa4c85cfa4c44e1721d66e3e8f4@somebody.domain.com>\nwrote:\n\nTest message";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Test reply');
    });
    it('works with brief quotes', function() {
      var msgBody;
      msgBody = "Hi\nOn 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n\n> Hello";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Hi');
    });
    it('works with brief quotes', function() {
      var msgBody;
      msgBody = "Hi\nOn 04/19/2011 07:10 AM, Roman Tkachenko wrote:\n\n> Hello";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Hi');
    });
    it('is not fooled bt indents', function() {
      var msgBody;
      msgBody = "YOLO salvia cillum kogi typewriter mumblecore cardigan skateboard Austin.\n\n------On 12/29/1987 17:32 PM, Julius Caesar wrote-----\n\nBrunch mumblecore pug Marfa tofu, irure taxidermy hoodie readymade pariatur.";
      return expect(planer.extractFromPlain(msgBody)).to.equal('YOLO salvia cillum kogi typewriter mumblecore cardigan skateboard Austin.');
    });
    it('is not fooled by empty lines in quoted messages', function() {
      var msgBody;
      msgBody = "Btw blah blah...\n\nOn Tue, Jan 27, 2015 at 12:42 PM -0800, \"Company\" <christine.XXX@XXX.com> wrote:\n\nHi Mark,\nBlah blah? \nThanks,Christine \n\nOn Jan 27, 2015, at 11:55 AM, Mark XXX <mark@XXX.com> wrote:\n\nLorem ipsum?\nMark\n\nSent from Acompli";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Btw blah blah...');
    });
    it('does not barf on unicode characters in a name', function() {
      var msgBody;
      msgBody = "Replying ok\n2011/4/7 Nathan \xd0\xb8ova <support@example.com>\n\n>  Cool beans, scro";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Replying ok');
    });
    it('understands the original message headers are not part of the reply', function() {
      var msgBody;
      msgBody = "Allo! Follow up MIME!\n\nFrom: somebody@example.com\nSent: March-19-11 5:42 PM\nTo: Somebody\nSubject: The manager has commented on your Loop\n\nBlah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Allo! Follow up MIME!');
    });
    it('understands the original message headers in German are not part of the reply', function() {
      var msgBody;
      msgBody = "Allo! Follow up MIME!\n\nVon: somebody@example.com\nGesendet: Dienstag, 25. November 2014 14:59\nAn: Somebody\nBetreff: The manager has commented on your Loop\n\nBlah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Allo! Follow up MIME!');
    });
    it('understands the original message headers in French are not part of the reply', function() {
      var msgBody;
      msgBody = "Allo! Follow up MIME!\n\nDe : Brendan xxx [mailto:brendan.xxx@xxx.com]\nEnvoyé : vendredi 23 janvier 2015 16:39\nÀ : Camille XXX\nObjet : Follow Up\n\nBlah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Allo! Follow up MIME!');
    });
    it('understands the original message headers in Danish are not part of the reply', function() {
      var msgBody;
      msgBody = "Allo! Follow up MIME!\n\nFra: somebody@example.com\nSendt: 19. march 2011 12:10\nTil: Somebody\nEmne: The manager has commented on your Loop\n\nBlah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Allo! Follow up MIME!');
    });
    it('understands the original message headers in Swedish are not part of the reply', function() {
      var msgBody;
      msgBody = "Allo! Follow up MIME!\n\nFrån: Anno Sportel [mailto:anno.spoel@hsbcssad.com]\nSkickat: den 26 augusti 2015 14:45\nTill: Isacson Leiff\nÄmne: RE: Week 36\n\nBlah-blah-blah";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Allo! Follow up MIME!');
    });
    it('understands French date person wrote splitters', function() {
      var msgBody;
      msgBody = "Lorem ipsum\n\nLe 23 janv. 2015 à 22:03, Brendan xxx <brendan.xxx@xxx.com<mailto:brendan.xxx@xxx.com>> a écrit:\n\nBonjour!";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Lorem ipsum');
    });
    it('understands Polish date person wrote splitters', function() {
      var msgBody;
      msgBody = "Lorem ipsum\n\nW dniu 28 stycznia 2015 01:53 użytkownik Zoe xxx <zoe.xxx@xxx.com>\nnapisał:\n\nBlah!";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Lorem ipsum');
    });
    it('understands Swedish date person wrote splitters', function() {
      var msgBody;
      msgBody = "Lorem\nDen 14 september, 2015 02:23:18, Valentino Rudy (valentino@rudy.be) skrev:\n\nVeniam laborum mlkshk kale chips authentic. Normcore mumblecore laboris, fanny pack readymade eu blog chia pop-up freegan enim master cleanse.";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Lorem');
    });
    it('understands Norwegian date person wrote splitters', function() {
      var msgBody;
      msgBody = "Lorem\nPå 14 september 2015 på 02:23:18, Valentino Rudy (valentino@rudy.be) skrev:\n\nVeniam laborum mlkshk kale chips authentic. Normcore mumblecore laboris, fanny pack readymade eu blog chia pop-up freegan enim master cleanse.";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Lorem');
    });
    it('understands Norwegian date person wrote splitters', function() {
      var msgBody;
      msgBody = "Gluten-free culpa lo-fi et nesciunt nostrud.\n\nOp 17-feb.-2015, om 13:18 heeft Julius Caesar <pantheon@rome.com> het volgende geschreven:\n\nSmall batch beard laboris tempor, non listicle hella Tumblr heirloom. ";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Gluten-free culpa lo-fi et nesciunt nostrud.');
    });
    it('is not fooled by fake quotations', function() {
      var msgBody;
      msgBody = "Visit us now for assistance...\n>>> >>>  http://www.domain.com <<<\nVisit our site by clicking the link above";
      return expect(planer.extractFromPlain(msgBody)).to.equal(msgBody);
    });
    it('is not fooled into thinking a link ends a quotation', function() {
      var msgBody;
      msgBody = "8.45am-1pm\n\nFrom: somebody@example.com\n\n<http://email.example.com/c/dHJhY2tpbmdfY29kZT1mMDdjYzBmNzM1ZjYzMGIxNT\n>  <bob@example.com <mailto:bob@example.com> >\n\nRequester: ";
      expect(planer.extractFromPlain(msgBody)).to.equal('8.45am-1pm');
      msgBody = "Blah\n\nOn Thursday, October 25, 2012 at 3:03 PM, life is short. on Bob wrote:\n\n>\n> Post a response by replying to this email\n>\n (http://example.com/c/YzOTYzMmE) >\n> life is short. (http://example.com/c/YzMmE)\n>";
      expect(planer.extractFromPlain(msgBody)).to.equal('Blah');
      msgBody = "Blah\n\nOn Monday, 24 September, 2012 at 3:46 PM, bob wrote:\n\n> [Ticket #50] test from bob\n>\n> View ticket (http://example.com/action\n_nonce=3dd518)\n>";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Blah');
    });
    it('is ok with the og message block starting with a date', function() {
      var msgBody;
      msgBody = "Blah\n\nDate: Wed, 16 May 2012 00:15:02 -0600\nTo: klizhentas@example.com";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Blah');
    });
    it('is not fooled when stars surround headers', function() {
      var msgBody;
      msgBody = "Hi\n\n*From:* bob@example.com [mailto:\nbob@example.com]\n*Sent:* Wednesday, June 27, 2012 3:05 PM\n*To:* travis@example.com\n*Subject:* Hello";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Hi');
    });
    it('can handle weird dates in header block', function() {
      var msgBody;
      msgBody = "Hi\n\nDate: Fri=2C 28 Sep 2012 10:55:48 +0000\nFrom: tickets@example.com\nTo: bob@example.com\nSubject: [Ticket #8] Test\n";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Hi');
    });
    it('preserves forwarded messages', function() {
      var msgBody;
      msgBody = "FYI\n\n---------- Forwarded message ----------\nFrom: bob@example.com\nDate: Tue, Sep 4, 2012 at 1:35 PM\nSubject: Two\nline subject\nTo: rob@example.com\n\nText";
      return expect(planer.extractFromPlain(msgBody)).to.equal(msgBody);
    });
    it('is not fooled by forwards inside quotations', function() {
      var msgBody;
      msgBody = "Blah\n\n-----Original Message-----\n\nFYI\n\n---------- Forwarded message ----------\nFrom: bob@example.com\nDate: Tue, Sep 4, 2012 at 1:35 PM\nSubject: Two\nline subject\nTo: rob@example.com\n\nText";
      return expect(planer.extractFromPlain(msgBody)).to.equal('Blah');
    });
    it('can handle a message with 2 links', function() {
      var msgBody;
      msgBody = "<http://link1> <http://link2>";
      return expect(planer.extractFromPlain(msgBody)).to.equal(msgBody);
    });
    return it('does not throw errors on messages with malformed links', function() {
      var msgBody;
      msgBody = "http://test.lever.co/YOU HAVE AN INTERVIEW TODAY\nhttps://test.lever.co/interviews/07a605a0-0d0a-00e8-00aa-f02ca5350180 is coming up today athttps://www.google.com/calendar/event?eid=Z2FrbzhxcW0000YwbmtmMDN1ZWZ2OHAycnMgbGV2Z0000W1vLmNvbV82am00000000hvY3RjN200000000Vjc00000Bn.\n\nhttps://test.lever.co/interviews/0000a5ab-000b-43aa-a00a-f020003aaa84";
      return expect(planer.extractFromPlain(msgBody)).to.equal(msgBody);
    });
  });

}).call(this);
